{"version":3,"sources":["api.tsx","routes/Price.tsx","routes/Chart.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","ResetStyle.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinPrice","coinId","ViewBox","styled","div","props","theme","bgColor","textColor","Price","useQuery","isLoading","data","quotes","USD","price","Math","floor","ath_price","Chart","isDark","endDate","Date","now","startDate","fetchCoinHistory","type","series","name","map","getTime","openDate","options","mode","chart","height","width","background","toolbar","autoSelected","show","zoom","enabled","plotOptions","candlestick","colors","upward","downward","stroke","curve","yaxis","xaxis","categories","time_close","title","text","align","tooltip","y","formatter","value","toFixed","closeDate","Container","Header","header","Title","h1","accentColor","BackBtn","button","coinCardColor","Loader","span","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","fontWeightBold","Coin","useParams","state","useLocation","rank","fetchCoinInfo","infoLoading","infoData","priceLoading","priceData","priceMatch","useMatch","chartMatch","loading","to","symbol","open_source","description","total_supply","max_supply","path","element","DarkModeBtn","CoinsList","ul","li","Img","img","Coins","toggleDark","onClick","slice","coin","id","src","toLowerCase","Router","basename","process","ResetStyle","createGlobalStyle","darkTheme","chartUpColor","chartCloseColor","lightTheme","GlobalStyle","App","useState","setIsDark","current","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.09037fe0.chunk.js","sourcesContent":["\r\nconst BASE_URL = \"https://api.coinpaprika.com/v1\";\r\n\r\n// Coins.tsx\r\nexport const fetchCoins = () => {\r\n\r\n    return fetch(`${BASE_URL}/coins`).then(response => response.json());\r\n\r\n}\r\n\r\n\r\n// Coin.tsx\r\nexport const fetchCoinInfo = (coinId: string) => {\r\n    return fetch(`${BASE_URL}/coins/${coinId}`).then(response => response.json());\r\n}\r\n\r\nexport const fetchCoinPrice = (coinId: string) => {\r\n    return fetch(`${BASE_URL}/tickers/${coinId}`).then(response => response.json());\r\n}\r\n\r\n// Chart.tsx\r\n\r\nexport const fetchCoinHistory = (coinId: string) => {\r\n    const endDate = Math.floor(Date.now() / 1000)\r\n    const startDate = endDate - (60 * 60 * 24 * 7 * 2);\r\n    return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`)\r\n        .then(response => response.json()) // data 넘겨주기 체크\r\n}","import { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinPrice } from \"../api\";\r\n\r\n// price url https://api.coinpaprika.com/v1/tickers/btc-bitcoin\r\n// general : `https://api.coinpaprika.com/v1/tickers/${coinId}`\r\n\r\ninterface PriceProps {\r\n    coinId: string;\r\n}\r\n\r\ninterface PriceData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    circulating_supply: number;\r\n    total_supply: number;\r\n    max_supply: number;\r\n    beta_value: number;\r\n    first_data_at: string;\r\n    last_updated: string;\r\n    quotes: {\r\n        USD: {\r\n            ath_date: string;\r\n            ath_price: number;\r\n            market_cap: number;\r\n            market_cap_change_24h: number;\r\n            percent_change_1h: number;\r\n            percent_change_1y: number;\r\n            percent_change_6h: number;\r\n            percent_change_7d: number;\r\n            percent_change_12h: number;\r\n            percent_change_15m: number;\r\n            percent_change_24h: number;\r\n            percent_change_30d: number;\r\n            percent_change_30m: number;\r\n            percent_from_price_ath: number;\r\n            volume_24h: number;\r\n            volume_24h_change_24h: number;\r\n            price: number;\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\nconst ViewBox = styled.div`\r\n    height: 4vh;\r\n    background-color: ${props => props.theme.bgColor};\r\n    color: ${props => props.theme.textColor};\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    font-weight: 600;\r\n`\r\n\r\nconst Price = ({coinId}:PriceProps) => {\r\n\r\n    const { isLoading, data } = useQuery<PriceData>([\"price\", coinId], () => fetchCoinPrice(coinId))\r\n\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <ViewBox>\r\n                {isLoading ? \"Loading...\" : (\r\n                    `Precent Price : ${data?.quotes.USD.price ? Math.floor(data?.quotes.USD.price * 1181) : 0}`\r\n                    )}\r\n            </ViewBox>\r\n            <ViewBox>\r\n                {`ATH Price : ${data?.quotes.USD.ath_price ? Math.floor(data?.quotes.USD.ath_price * 1181) : 0}`}\r\n            </ViewBox>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Price;","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface IHistorical {\r\n    time_open: string;\r\n    time_close: string;\r\n    open: number;\r\n    high: number;\r\n    low: number;\r\n    close: number;\r\n    volume: number;\r\n    market_cap: number;\r\n}\r\n\r\ninterface ChartProps {\r\n    coinId: string;\r\n    isDark: boolean;\r\n}\r\n\r\n\r\n\r\nconst Chart = ({ coinId, isDark }: ChartProps) => {\r\n\r\n    const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\r\n\r\n    const openDate = (data: any) => {\r\n        return data?.map((price: any) => {\r\n            const timeOpen = new Date(price[\"time_open\"])\r\n            return [timeOpen.getTime(), [price[\"open\"], price[\"high\"], price[\"low\"], price[\"close\"]]]\r\n            })\r\n        }\r\n\r\n    const closeDate = (data: any) => {\r\n        return data?.map((price: any) => {\r\n            const timeClose = new Date(price[\"time_close\"])\r\n            return [timeClose.getTime(), [price[\"open\"], price[\"high\"], price[\"low\"], price[\"close\"]]]\r\n            })\r\n        }\r\n\r\n    return (\r\n        <div>\r\n            { isLoading ?\r\n                \"Loading chart...\" :\r\n                (<ApexChart\r\n                    type=\"candlestick\"\r\n                    series={[\r\n                        {\r\n                            name: \"Open Price\",\r\n                            data: openDate(data),\r\n                        },\r\n                        // {\r\n                        //     name: \"Close Price\",\r\n                        //     data: closeDate(data),\r\n                        // }\r\n                    ]}\r\n                    options={{\r\n                        theme: {\r\n                            mode: isDark ? \"dark\" : \"light\",\r\n                        },\r\n                        chart: {\r\n                            height: 700,\r\n                            width: 300,\r\n                            background: \"transparent\",\r\n                            toolbar: {\r\n                                autoSelected: \"pan\",\r\n                                show: false\r\n                              },\r\n                              zoom: {\r\n                                enabled: false\r\n                            }\r\n                        },\r\n                        plotOptions: {\r\n                            candlestick: {\r\n                              colors: {\r\n                                upward:  isDark ? \"#B5E5CF\" : \"#3D5B59\",\r\n                                downward: isDark ? \"#FCB5AC\" : \"#B99095\"\r\n                              }\r\n                            }\r\n                        },\r\n                        stroke: {\r\n                            curve: \"smooth\",\r\n                            width: 2,\r\n                        },\r\n                        yaxis: {\r\n\r\n                            show: false,\r\n                        },\r\n                        xaxis: {\r\n                            type: \"datetime\",\r\n                            categories: data?.map((price) => price.time_close),\r\n                        },\r\n                        title: {\r\n                            text: \"Open Time Chart\",\r\n                            align: \"left\"\r\n                        },\r\n                        tooltip: {\r\n                            y: {\r\n                                formatter: (value) => `$${value.toFixed(2)}`,\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n            {isLoading ?\r\n                \"\" :\r\n                (<ApexChart\r\n                    type=\"candlestick\"\r\n                    series={[\r\n                        {\r\n                            name: \"Open Price\",\r\n                            data: closeDate(data),\r\n                        },\r\n                        // {\r\n                        //     name: \"Close Price\",\r\n                        //     data: closeDate(data),\r\n                        // }\r\n                    ]}\r\n                    options={{\r\n                        theme: {\r\n                            mode: isDark ? \"dark\" : \"light\",\r\n                        },\r\n                        chart: {\r\n                            height: 700,\r\n                            width: 500,\r\n                            background: \"transparent\",\r\n                            toolbar: {\r\n                                autoSelected: \"pan\",\r\n                                show: false\r\n                              },\r\n                              zoom: {\r\n                                enabled: false\r\n                              }\r\n                        },\r\n                        plotOptions: {\r\n                            candlestick: {\r\n                              colors: {\r\n                                upward:  isDark ? \"#B5E5CF\" : \"#3D5B59\",\r\n                                downward: isDark ? \"#FCB5AC\" : \"#B99095\"\r\n                              }\r\n                            }\r\n                        },\r\n                        stroke: {\r\n                            curve: \"smooth\",\r\n                            width: 2,\r\n                        },\r\n                        yaxis: {\r\n                            show: false,\r\n                        },\r\n                        xaxis: {\r\n                            type: \"datetime\",\r\n                            categories: data?.map((price) => price.time_close),\r\n                        },\r\n                        title: {\r\n                            text: \"Close Time Chart\",\r\n                            align: \"left\"\r\n                        },\r\n                        tooltip: {\r\n                            y: {\r\n                                formatter: (value) => `$${value.toFixed(2)}`,\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import { useLocation, useParams } from \"react-router-dom\";\r\nimport { Routes, Route, useMatch } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\"\r\nimport Price from './Price'\r\nimport Chart from './Chart'\r\nimport styled from \"styled-components\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoinInfo, fetchCoinPrice } from \"../api\";\r\n\r\ninterface RouteParmas {\r\n    coinId: string;\r\n}\r\n\r\ninterface RouterState {\r\n    name?: string;\r\n    rank?: number;\r\n}\r\n\r\n\r\ninterface InfoData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    is_new: boolean;\r\n    is_active: boolean;\r\n    type: string;\r\n    contract: string;\r\n    platform: string;\r\n    // contracts: object;\r\n    // parent: object;\r\n    // tags: object;\r\n    // team: object;\r\n    description: string;\r\n    message: string;\r\n    open_source: boolean;\r\n    started_at: string;\r\n    development_status: string;\r\n    hardware_wallet: boolean;\r\n    proof_type: string;\r\n    org_structure: string;\r\n    hash_algorithm: string;\r\n    // links: object;\r\n    // links_extended: object;\r\n    // whitepaper: object;\r\n    first_data_at: string;\r\n    last_data_at: string;\r\n}\r\n\r\ninterface PriceData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    circulating_supply: number;\r\n    total_supply: number;\r\n    max_supply: number;\r\n    beta_value: number;\r\n    first_data_at: string;\r\n    last_updated: string;\r\n    quotes: {\r\n        USD: {\r\n            ath_date: string;\r\n            ath_price: number;\r\n            market_cap: number;\r\n            market_cap_change_24h: number;\r\n            percent_change_1h: number;\r\n            percent_change_1y: number;\r\n            percent_change_6h: number;\r\n            percent_change_7d: number;\r\n            percent_change_12h: number;\r\n            percent_change_15m: number;\r\n            percent_change_24h: number;\r\n            percent_change_30d: number;\r\n            percent_change_30m: number;\r\n            percent_from_price_ath: number;\r\n            volume_24h: number;\r\n            volume_24h_change_24h: number;\r\n            price: number;\r\n        }\r\n    };\r\n}\r\n\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n    max-width: 480px;\r\n    margin:0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    height: 12vh;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    color:${props => props.theme.accentColor};\r\n    font-size: 48px;\r\n`\r\nconst BackBtn = styled.button`\r\n    width: 90px;\r\n    height: 4vh;\r\n    color:${props => props.theme.textColor};\r\n    background-color: ${props => props.theme.coinCardColor};\r\n    border:0;\r\n    border-radius: 100px;\r\n    &:hover {\r\n        width: 100px;\r\n        height: 5vh;\r\n    }\r\n`\r\n\r\nconst Loader = styled.span`\r\n    display: block;\r\n    text-align: center;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  color:${props => props.theme.textColor};\r\n  background-color: ${props => props.theme.coinCardColor};\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin: 30px 0px;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${props => props.theme.coinCardColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n        props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  font-weight: ${(props) =>\r\n        props.isActive && props.theme.fontWeightBold};\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\ninterface ICoinProps {\r\n    isDark:boolean\r\n}\r\n\r\nconst Coin = ({isDark}:ICoinProps) => {\r\n\r\n    const { coinId } = useParams() as RouteParmas; // 이건 coinId을 (Param) 받음\r\n    const { state } = useLocation(); // Link state로 내려준 값을 받을 수 있다.\r\n    // 문제는 버튼을 눌러야 Location 정보가 넘어간다.\r\n    const name = state?.name || \"loading...\" as RouterState;\r\n    const rank = state?.rank || 0 as RouterState;\r\n\r\n    const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>([\"info\", coinId], () => fetchCoinInfo(coinId))\r\n    const { isLoading: priceLoading, data: priceData } = useQuery<PriceData>([\"price\", coinId], () => fetchCoinPrice(coinId))\r\n\r\n    const priceMatch = useMatch(\"/:coinId/price\")\r\n    const chartMatch = useMatch(\"/:coinId/chart\") // 어디에 있는지 알려줌\r\n\r\n    // const [loading, setLoading] = useState(true);\r\n    // const [info, setInfo] = useState<InfoData>();\r\n    // const [priceInfo, setPriceInfo] = useState<PriceData>();\r\n    // useEffect(() => {\r\n    //     (async () => {\r\n    //         const infoData = await (await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)).json();\r\n    //         const priceData = await (await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)).json()\r\n    //         setInfo(infoData);\r\n    //         setPriceInfo(priceData);\r\n    //         setLoading(false);\r\n    //     })();\r\n    // }, [coinId])\r\n\r\n    const loading = infoLoading || priceLoading;\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <Title>\r\n                    {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n                </Title>\r\n                <BackBtn>\r\n                    <Link to='/'> Home </Link>\r\n                </BackBtn>\r\n            </Header>\r\n            {loading ? (<Loader>Loading...</Loader>) : (\r\n                <>\r\n                    <Overview>\r\n                        <OverviewItem>\r\n                            <span>Rank:</span>\r\n                            <span>{infoData?.rank}</span>\r\n                        </OverviewItem>\r\n                        <OverviewItem>\r\n                            <span>Symbol:</span>\r\n                            <span>${infoData?.symbol}</span>\r\n                        </OverviewItem>\r\n                        <OverviewItem>\r\n                            <span>Open Source:</span>\r\n                            <span>{infoData?.open_source ? \"Yes\" : \"No\"}</span>\r\n                        </OverviewItem>\r\n                    </Overview>\r\n                    <Description>{infoData?.description}</Description>\r\n                    <Overview>\r\n                        <OverviewItem>\r\n                            <span>Total Suply:</span>\r\n                            <span>{priceData?.total_supply}</span>\r\n                        </OverviewItem>\r\n                        <OverviewItem>\r\n                            <span>Max Supply:</span>\r\n                            <span>{priceData?.max_supply}</span>\r\n                        </OverviewItem>\r\n                    </Overview>\r\n\r\n                    <Tabs>\r\n                        <Tab isActive={chartMatch !== null}>\r\n                            <Link to={`/${coinId}/chart`}>Chart</Link>\r\n                        </Tab>\r\n                        <Tab isActive={priceMatch !== null}>\r\n                            <Link to={`/${coinId}/price`}>Price</Link>\r\n                        </Tab>\r\n                    </Tabs>\r\n\r\n                    {/* <Link to={`/${coinId}/price`}>Price</Link>\r\n                    <Link to={`/${coinId}/chart`}>Chart</Link> */}\r\n                    <Routes>\r\n                        <Route\r\n                            path=\"price\"\r\n                            element={<Price coinId={coinId} />} />\r\n                        <Route\r\n                            path=\"chart\"\r\n                            element={<Chart coinId={coinId} isDark={isDark} />} />\r\n                    </Routes>\r\n                </>\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Coin;","import styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoins } from \"../api\";\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n    max-width: 480px;\r\n    margin:0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    height: 10vh;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`;\r\n\r\nconst DarkModeBtn = styled.button`\r\n    width: 90px;\r\n    height: 4vh;\r\n    color:${props => props.theme.textColor};\r\n    background-color: ${props => props.theme.coinCardColor};\r\n    border:0;\r\n    border-radius: 100px;\r\n\r\n    &:focus {\r\n        cursor: pointer\r\n    }\r\n    &:hover {\r\n        width: 100px;\r\n        height: 5vh;\r\n    }\r\n`\r\n\r\nconst CoinsList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n    background-color: ${(props) => props.theme.coinCardColor};\r\n    color:${props => props.theme.textColor};\r\n    padding: 20px;\r\n    border-radius: 15px;\r\n    margin-bottom: 10px;\r\n    a {\r\n        display:flex;\r\n        align-items: center;\r\n        transition: all 0.3s ease-in;\r\n    }\r\n    &:hover {\r\n        a {\r\n            padding: 10px;\r\n            color: ${(props) => props.theme.accentColor};\r\n            font-weight: bolder;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    color:${props => props.theme.accentColor};\r\n    font-size: 48px;\r\n`\r\n\r\nconst Loader = styled.span`\r\n    display: block;\r\n    text-align: center;\r\n`\r\n\r\nconst Img = styled.img`\r\n    margin-right:10px;\r\n    width: 35px;\r\n    height: 35px;\r\n`\r\n\r\ninterface Icoin {\r\n    id: string,\r\n    name: string,\r\n    symbol: string,\r\n    rank: number,\r\n    is_new: boolean,\r\n    is_active: boolean,\r\n    type: string,\r\n}\r\n\r\ninterface ICoinsProps {\r\n    toggleDark: () => void;\r\n}\r\n\r\n\r\nconst Coins = ({toggleDark}: ICoinsProps) => {\r\n    const { isLoading, data } = useQuery<Icoin[]>(\"allCoins\", fetchCoins)\r\n\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <Title>Coins</Title>\r\n                <DarkModeBtn onClick={toggleDark}>Dark Mode</DarkModeBtn>\r\n            </Header>\r\n            {isLoading ? (<Loader>Loading...</Loader>) :\r\n                (\r\n                    <CoinsList>\r\n                        {\r\n                            data?.slice(0, 100).map(coin => (\r\n                                <Coin key={coin.id} >\r\n                                    <Link\r\n                                        to={`/${coin.id}`}\r\n                                        state={{ name: coin.name, rank: coin.rank }}>\r\n                                        <Img src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`} />\r\n                                        {coin.name} &rarr;\r\n                                    </Link>\r\n                                </Coin>\r\n                                )\r\n                            )\r\n                        }\r\n                    </CoinsList>\r\n                )\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Coins;","import {BrowserRouter, Routes, Route} from \"react-router-dom\";\r\nimport Coin from './routes/Coin'\r\nimport Coins from './routes/Coins'\r\n\r\n\r\ninterface IRouterProps {\r\n    toggleDark: () => void;\r\n    isDark:boolean;\r\n}\r\n\r\n\r\n\r\nconst Router = ({ toggleDark, isDark }:IRouterProps) => {\r\n    return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Routes>\r\n            <Route path=\"/\" element={<Coins toggleDark={toggleDark} />} />\r\n            <Route path=\"/:coinId/*\" element={<Coin isDark={isDark} />} />\r\n        </Routes>\r\n    </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Router;","import { createGlobalStyle } from \"styled-components\";\r\n\r\n// Reset\r\nexport const ResetStyle =  createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\nbody {\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n}\r\n\r\n`","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme:DefaultTheme = {\r\n    bgColor: \"#222f3e\",\r\n    textColor: \"#c8d6e5\",\r\n    accentColor: \"#91f7dc\",\r\n    fontWeightBold: \"bold\",\r\n    chartUpColor: \"#FCB5AC\",\r\n    chartCloseColor: \"#B5E5CF\",\r\n    coinCardColor: \"#2d2d2d\"\r\n}\r\n\r\nexport const lightTheme:DefaultTheme = {\r\n    bgColor: \"#c8d6e5\",\r\n    textColor: \"#2d2d2d\",\r\n    accentColor: \"#10ac84\",\r\n    fontWeightBold: \"bold\",\r\n    chartUpColor: \"#3D5B59\",\r\n    chartCloseColor: \"#B99095\",\r\n    coinCardColor: \"#C8CBD0\"\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport Router from \"./Router\"\r\nimport { ResetStyle } from \"./ResetStyle\";\r\nimport { createGlobalStyle } from \"styled-components\"\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background-color: ${props => props.theme.bgColor};\r\n    color:${props => props.theme.textColor};\r\n    line-height: 1.2;\r\n  }\r\n\r\n  a {\r\n    color:inherit;\r\n  }\r\n`\r\n\r\n\r\nfunction App() {\r\n\r\n  const [isDark, setIsDark] = useState(false)\r\n  const toggleDark = () => setIsDark(current => !current)\r\n\r\n  return (\r\n    <>\r\n    <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\r\n      <ResetStyle />\r\n      <GlobalStyle />\r\n      <Router isDark={isDark} toggleDark={toggleDark} />\r\n      <ReactQueryDevtools initialIsOpen={true} />\r\n    </ThemeProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { QueryClient, QueryClientProvider } from 'react-query';\r\n\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}